{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet TecnicoCreateComponent = class TecnicoCreateComponent {\n  constructor(service, toast) {\n    this.service = service;\n    this.toast = toast;\n    this.tecnico = {\n      nome: '',\n      cpf: '',\n      email: '',\n      senha: '',\n      perfis: [],\n      dataCriacao: ''\n    };\n    this.nome = new FormControl(null, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]);\n    this.cpf = new FormControl(null, [Validators.required, Validators.minLength(11), Validators.maxLength(11)]);\n    this.email = new FormControl(null, [Validators.required, Validators.email, Validators.maxLength(80)]);\n    this.senha = new FormControl(null, [Validators.required, Validators.minLength(5), Validators.maxLength(50)]);\n  }\n  ngOnInit() {}\n  create() {\n    this.service.create(this.tecnico).subscribe(resposta => {\n      this.toast.success('Técnico criado com sucesso!', 'Cadastro', {\n        timeOut: 6000\n      });\n    }, err => {\n      if (err.error.errors) {\n        err.error.errors.forEach(element => {\n          this.toast.error(element.message, 'Erro', {\n            timeOut: 6000\n          });\n        });\n      } else {\n        this.toast.error(err.error.message, 'Erro', {\n          timeOut: 6000\n        });\n      }\n    });\n  }\n  addPerfil(perfil) {\n    if (this.tecnico.perfis.includes(perfil)) {\n      this.tecnico.perfis.splice(this.tecnico.perfis.indexOf(perfil), 1);\n    } else {\n      this.tecnico.perfis.push(perfil);\n    }\n  }\n  limparCampos() {\n    let checks = document.querySelectorAll('input[type=checkbox]');\n    checks.forEach(check => {\n      check.checked = false;\n    });\n    this.tecnico.nome = '';\n    this.tecnico.cpf = '';\n    this.tecnico.email = '';\n    this.tecnico.senha = '';\n    this.tecnico.perfis = [];\n  }\n  validaCampos() {\n    return this.nome.valid && this.cpf.valid && this.email.valid && this.senha.valid;\n  }\n  getErrorMessageNome() {\n    if (this.nome.hasError('required')) {\n      return 'Você deve informar um nome';\n    }\n    if (this.nome.hasError('maxlength')) {\n      return 'O nome deve ter no máximo 50 caracteres';\n    }\n    if (this.nome.hasError('minlength')) {\n      return 'O nome deve ter no mínimo 3 caracteres';\n    }\n    return null;\n  }\n  getErrorMessageCpf() {\n    if (this.cpf.hasError('required')) {\n      return 'Você deve informar um CPF';\n    }\n    if (this.cpf.hasError('minlength')) {\n      return 'CPF inválido';\n    }\n    if (this.cpf.hasError('maxlength')) {\n      return 'CPF inválido';\n    }\n    return null;\n  }\n  getErrorMessageEmail() {\n    if (this.email.hasError('required')) {\n      return 'Você deve informar um email';\n    }\n    if (this.email.hasError('maxlength')) {\n      return 'O email deve ter no máximo 80 caracteres';\n    }\n    return this.email.hasError('email') ? 'Email inválido' : '';\n  }\n  getErrorMessagePassword() {\n    if (this.senha.hasError('minlength')) {\n      return 'A senha deve ter no mínimo 5 caracteres';\n    }\n    if (this.senha.hasError('maxlength')) {\n      return 'A senha deve ter no máximo 50 caracteres';\n    }\n    if (this.senha.hasError('required')) {\n      return 'Você deve informar uma senha';\n    }\n    return null;\n  }\n};\nTecnicoCreateComponent = __decorate([Component({\n  selector: 'app-tecnico-create',\n  templateUrl: './tecnico-create.component.html',\n  styleUrls: ['./tecnico-create.component.css']\n})], TecnicoCreateComponent);\nexport { TecnicoCreateComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","Validators","TecnicoCreateComponent","constructor","service","toast","nome","cpf","email","senha","perfis","dataCriacao","required","minLength","maxLength","ngOnInit","create","tecnico","subscribe","resposta","success","timeOut","err","error","errors","forEach","element","message","addPerfil","perfil","includes","splice","indexOf","push","limparCampos","checks","document","querySelectorAll","check","checked","validaCampos","valid","getErrorMessageNome","hasError","getErrorMessageCpf","getErrorMessageEmail","getErrorMessagePassword","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Administrador\\Documents\\JAVA\\helpdesk-front\\helpdesk\\src\\app\\components\\tecnico\\tecnico-create\\tecnico-create.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { Tecnico } from 'src/app/models/tecnico';\nimport { TecnicoService } from 'src/app/services/tecnico.service';\n\n@Component({\n  selector: 'app-tecnico-create',\n  templateUrl: './tecnico-create.component.html',\n  styleUrls: ['./tecnico-create.component.css']\n})\nexport class TecnicoCreateComponent implements OnInit {\n\n  tecnico: Tecnico = {\n    nome: '',\n    cpf: '',\n    email: '',\n    senha: '',\n    perfis: [],\n    dataCriacao: ''\n  };\n\n  nome: FormControl = new FormControl(null, [Validators.required, Validators.minLength(3), Validators.maxLength(50)]);\n  cpf: FormControl =  new FormControl(null, [Validators.required, Validators.minLength(11), Validators.maxLength(11)]);\n  email: FormControl = new FormControl(null, [Validators.required, Validators.email, Validators.maxLength(80)]);\n  senha: FormControl =  new FormControl(null, [Validators.required, Validators.minLength(5), Validators.maxLength(50)]);\n  \n  constructor(private service: TecnicoService, private toast: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  \n  create(): void {\n    this.service.create(this.tecnico).subscribe(resposta => {\n      this.toast.success('Técnico criado com sucesso!', 'Cadastro', { timeOut: 6000});\n    }, err => {\n      if(err.error.errors) {\n        err.error.errors.forEach(element => {\n          this.toast.error(element.message, 'Erro', { timeOut: 6000});\n        });\n      } else {\n        this.toast.error(err.error.message, 'Erro', { timeOut: 6000});\n      }     \n    });\n  }\n\n  addPerfil(perfil: any): void {\n    if (this.tecnico.perfis.includes(perfil)) {\n      this.tecnico.perfis.splice(this.tecnico.perfis.indexOf(perfil), 1);\n    } else {\n      this.tecnico.perfis.push(perfil);\n    } \n  }\n\n  limparCampos(): void {\n    let checks = document.querySelectorAll('input[type=checkbox]') as HTMLInputElement[] | any;\n    checks.forEach(check => {\n      check.checked = false;\n    });\n    this.tecnico.nome = '';\n    this.tecnico.cpf = '';\n    this.tecnico.email = '';\n    this.tecnico.senha = '';\n    this.tecnico.perfis = [];\n\n  }\n\n  validaCampos(): boolean {\n    return this.nome.valid && this.cpf.valid && this.email.valid && this.senha.valid;\n  }\n  \n  getErrorMessageNome(){\n    if (this.nome.hasError('required')) {\n      return 'Você deve informar um nome';\n    }\n    if (this.nome.hasError('maxlength')) {\n      return 'O nome deve ter no máximo 50 caracteres';\n    }\n    if (this.nome.hasError('minlength')) {\n      return 'O nome deve ter no mínimo 3 caracteres';\n    }\n    return null;\n  }\n\n  getErrorMessageCpf(){\n    if (this.cpf.hasError('required')) {\n      return 'Você deve informar um CPF';\n    }\n    if (this.cpf.hasError('minlength')) {\n      return 'CPF inválido';\n    }\n    if (this.cpf.hasError('maxlength')) {\n      return 'CPF inválido';\n    }\n    return null;\n  }\n\n  getErrorMessageEmail(){\n    if (this.email.hasError('required')) {\n      return 'Você deve informar um email';\n    }\n    if (this.email.hasError('maxlength')) {\n      return 'O email deve ter no máximo 80 caracteres';\n    }\n\n    return this.email.hasError('email') ? 'Email inválido' : '';\n  }\n\n  getErrorMessagePassword() {\n    if (this.senha.hasError('minlength')) {\n      return 'A senha deve ter no mínimo 5 caracteres';\n    }\n    if (this.senha.hasError('maxlength')) {\n      return 'A senha deve ter no máximo 50 caracteres';\n    }\n    if (this.senha.hasError('required')) {\n      return 'Você deve informar uma senha';\n    }\n\n    return null;\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}